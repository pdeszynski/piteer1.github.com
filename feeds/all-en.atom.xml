<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Yet another boring programmer's blog</title><link href="http://www.piotrdeszynski.com/" rel="alternate"></link><link href="http://www.piotrdeszynski.com/feeds/all-en.atom.xml" rel="self"></link><id>http://www.piotrdeszynski.com/</id><updated>2012-10-22T20:00:00+02:00</updated><entry><title>Yet another Zend Framework 2 performance test</title><link href="http://www.piotrdeszynski.com/zend-framework2-performance.html" rel="alternate"></link><updated>2012-10-22T20:00:00+02:00</updated><author><name>Piotr Deszyński</name></author><id>tag:www.piotrdeszynski.com,2012-10-22:zend-framework2-performance.html</id><summary type="html">&lt;p&gt;We have full version of ZF2! There's even a Zend Framework 2.0.3 version. Full of optimism I've started reading about it and
full of curiousity I've looked on performance charts. How big was my surprise when i've looked on charts seeing that ZF2 is 4 times slower
than ZF1 &lt;a href="http://www.enrise.com/2012/02/zend-framework-2-performance/"&gt;Enrise&lt;/a&gt;. Said to myself, it's an old post and tests were done on an old
version of ZF2, so probably it's not so bad at the end. Still I didn't think about doing that day any tests by myself.&lt;/p&gt;
&lt;p&gt;Few days ago I saw another great post by &lt;a href="http://www.enrise.com/2012/02/zend-framework-2-performance/"&gt;trq&lt;/a&gt;. He in opposition to previous test compared ZF2 with other
decent frameworks (&lt;strong&gt;Symfony 2&lt;/strong&gt; and &lt;a href="http://proemframework.org"&gt;Proem&lt;/a&gt;). Sadly this time also it didn't satisfy me with the results. For my luck test framework written by &lt;em&gt;trq&lt;/em&gt; is
available at &lt;a href="https://github.com/trq/phpBenches"&gt;Github&lt;/a&gt;. In the meantime I've found an module for ZF2 which caches classes (and as they write &lt;em&gt;"EDPSUPERLUMINAL - Caches the common Zend* classes used by your application into a single cache file, reducing reliance on the autoloader, and greatly improving the baseline performance of ZF2. By EVAN COURY"&lt;/em&gt;) on official ZF2 modules page. Being unsure if in testes done by &lt;em&gt;trq&lt;/em&gt; class caching was turned on, full of optimism I've decided to make tests by myself.&lt;/p&gt;
&lt;h2&gt;Machine spec&lt;/h2&gt;
&lt;p&gt;I've run tests on machine&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Core i7 Intel® Core™ i7-2630QM Processor (6M Cache, up to 2.90 GHz)&lt;/li&gt;
&lt;li&gt;16 GB DDR-3 RAM&lt;/li&gt;
&lt;li&gt;1TB (RAID 2x500GB 7200 RPM STRIPE) HDD&lt;/li&gt;
&lt;li&gt;Kubuntu 12.04&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Environment&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PHP 5.3.10-1ubuntu3.4 with Suhosin-Patch (cli) (built: Sep 12 2012 18:59:41)&lt;/li&gt;
&lt;li&gt;Apache/2.2.22 (Ubuntu)&lt;/li&gt;
&lt;li&gt;APC&lt;/li&gt;
&lt;li&gt;xhprof&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;First try - without class cache&lt;/h2&gt;
&lt;p&gt;Basically my results didn't differ from one provided by &lt;em&gt;trq&lt;/em&gt;
&lt;img alt="Requests per second" src="/images/2012/10/no_cache_zf2/request-per-second.png" title="Requests per sec" /&gt;
&lt;img alt="Response time" src="/images/2012/10/no_cache_zf2/response-time.png" title="Requests per sec" /&gt;
&lt;img alt="Number of function calls" src="/images/2012/10/no_cache_zf2/number-of-function-calls.png" title="Number of function calls" /&gt;
&lt;img alt="Number of files included" src="/images/2012/10/no_cache_zf2/number-of-files.png" title="Number of files included" /&gt;
&lt;img alt="Average load" src="/images/2012/10/no_cache_zf2/loadavg.png" title="Average load" /&gt;
&lt;img alt="Memory usage" src="/images/2012/10/no_cache_zf2/memory-usage.png" title="Memory usage" /&gt;&lt;/p&gt;
&lt;p&gt;As you can see &lt;strong&gt;ZF2 is far behind Symfony 2&lt;/strong&gt;. Response time was 4 times slower. That's quite bad. Let's move on to second try.&lt;/p&gt;
&lt;h2&gt;Second try - with class cache&lt;/h2&gt;
&lt;p&gt;Before making second try, I've added into &lt;em&gt;ZF2 Skeleton App&lt;/em&gt; &lt;strong&gt;EdsSuperLuminal&lt;/strong&gt; module and enabled it (this module is available at &lt;a href="https://github.com/EvanDotPro/EdpSuperluminal"&gt;Github&lt;/a&gt;)
&lt;img alt="Requests per second" src="/images/2012/10/with_cache_zf2/request-per-second.png" title="Requests per sec" /&gt;
&lt;img alt="Response time" src="/images/2012/10/with_cache_zf2/response-time.png" title="Requests per sec" /&gt;
&lt;img alt="Number of function calls" src="/images/2012/10/with_cache_zf2/number-of-function-calls.png" title="Number of function calls" /&gt;
&lt;img alt="Number of files included" src="/images/2012/10/with_cache_zf2/number-of-files.png" title="Number of files included" /&gt;
&lt;img alt="Average load" src="/images/2012/10/with_cache_zf2/loadavg.png" title="Average load" /&gt;
&lt;img alt="Memory usage" src="/images/2012/10/with_cache_zf2/memory-usage.png" title="Memory usage" /&gt;&lt;/p&gt;
&lt;p&gt;What a surprise... results didn't change too much!
To be honest I got dissapointed. I was hoping for competition between ZF2 and Symfony 2 (or at least 50% performance boost) but looking at these graphs we
can observe around 20% increase in number of requests handled. Still something, but comparing to &lt;em&gt;Symfony 2&lt;/em&gt; It's quite a low value. Looking at the results further
we could say that &lt;em&gt;ZF2&lt;/em&gt; will be using quite less I/O operations (from 163 to 20 included files, it's quite a result), but still memory usage might be a little terryfying.&lt;/p&gt;
&lt;h2&gt;Should I care?&lt;/h2&gt;
&lt;p&gt;Depends. In  most of cases these results doesn't matter. Firstly this is "Hello World!" test. Such tests doesn't have too big meaning in real life applications,
where bottleneck is mostly a database. Secondary, in most of the cases you don't need to squeeze 60 ms from your servers. In case of websites with huge traffic, sadly
&lt;em&gt;ZF2&lt;/em&gt; is not the best choice. In such a website 60ms difference might be huge performance impact. &lt;em&gt;Math.pow('Sadly', 2)&lt;/em&gt;  because I'm looking for framework
for a one of my company's big pages, cause it needs a lot of updates and rather I won't be able to use this framework. There performance really matters.&lt;/p&gt;
&lt;h2&gt;What next?&lt;/h2&gt;
&lt;p&gt;I have to wait. Hope that there will be some performance tunning with next minor releases of &lt;em&gt;ZF2&lt;/em&gt;. Until then I might stick to &lt;em&gt;Symfony 2&lt;/em&gt; or to some smaller framework available.
If you want want to try it by yourself you can clone &lt;em&gt;trq&lt;/em&gt; (requires PHP 5.4) repository, or mine forked repository with code updated to support PHP 5.3  available at &lt;a href="https://github.com/piteer1/phpBenches"&gt;Github&lt;/a&gt;&lt;/p&gt;</summary><category term="PHP"></category><category term="Frameworks"></category><category term="Zend Framework 2"></category><category term="Symfony 2"></category><category term="Performance"></category></entry><entry><title>Object Oriented Metrics - WTF?</title><link href="http://www.piotrdeszynski.com/object-oriented-metrics-introduction.html" rel="alternate"></link><updated>2012-10-18T22:00:00+02:00</updated><author><name>Piotr Deszyński</name></author><id>tag:www.piotrdeszynski.com,2012-10-18:object-oriented-metrics-introduction.html</id><summary type="html">&lt;h1&gt;WTF is that?&lt;/h1&gt;
&lt;p&gt;We'll start from an image. Did you see in past something like that?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Overview pyramid" src="/images/2012/10/overview-pyramid.png" title="An example of overview pyramid" /&gt;&lt;/p&gt;
&lt;p&gt;This is called &lt;strong&gt;Overview Pyramid&lt;/strong&gt;. This is, I think, most commonly used visualization of &lt;strong&gt;Object oriented metrics&lt;/strong&gt;. What are they?
&lt;strong&gt;Metrics&lt;/strong&gt; in short, are some kind of &lt;strong&gt;numeric values&lt;/strong&gt;, describing code (there is also a possibility to describe classess without code
using for e.g. UML), or in Object Oriented Metrics, describing &lt;strong&gt;classess&lt;/strong&gt;. It might be easier to describe it on an example. Let's take 
simpliest metric - &lt;strong&gt;LOC&lt;/strong&gt; (Lines Of Code), which is also seen on an overview pyramid. This metric describes how many lines of code 
are in all defined methods.&lt;/p&gt;
&lt;h2&gt;Ok, but why do we need them?&lt;/h2&gt;
&lt;p&gt;During my career I found myself in many situations that I had to review people's code. And I have to say I'm getting really often angry 
on what I see. Code likes to be really unreadable - lot's of &lt;em&gt;if&lt;/em&gt; instructions, hellish long methods, everywhere high coupling (sometimes
I think people don't know what's an DI, they just heard it it's fashionable in new frameworks but what the hell... I don't need it!).
This might be because mostly I'm used to look into PHP/JavaSript code and I think these languages are really really bad for person which
learns programming.&lt;/p&gt;
&lt;p&gt;Additionally I saw also people using for e.g. &lt;em&gt;'Design Patterns'&lt;/em&gt; without any knowledge about them. The're used only for the sake of 
using them. And this is make you more problematic to mainain the code than just have it done simple.&lt;/p&gt;
&lt;p&gt;Personally I think that people before starting to learn about Design Patterns should read about something that is called &lt;strong&gt;Design Disharmonies&lt;/strong&gt;.
These disharmonies are a bad thing in programming world and you should avoid them to maintain your code &lt;strong&gt;readable&lt;/strong&gt; and &lt;strong&gt;maintanable&lt;/strong&gt;. They
are called &lt;strong&gt;bad smells&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Still don't know why do I need these metrics them?&lt;/h2&gt;
&lt;p&gt;Ok, so if your code grows really big, you need to use more and more time only to verify the code base. If it's really huge then detecting such a
disharmonies is really hard work. Then the metrics are handy. Using them you can detect &lt;strong&gt;bad smelling code&lt;/strong&gt; and verify if somebody really left some bad suprises.&lt;/p&gt;
&lt;h2&gt;So what's with Overview Pyramid (Watch out! Yet another boring explaination)?&lt;/h2&gt;
&lt;p&gt;Let's get back to Overview Pyramid. There was one metric already described as an example: &lt;strong&gt;LOC&lt;/strong&gt;. But we have here also other ones:
&lt;strong&gt;CYCLO&lt;/strong&gt; - Cyclomatic Number. This number counts all possible paths that it can take. For e.g. &lt;strong&gt;if&lt;/strong&gt; instruction
will increase this number by one, cause program can go though this if or not. Of course bigger value means higher complexity, which in many 
cases might be bad.&lt;/p&gt;
&lt;p&gt;Further on the left side you can find &lt;strong&gt;NOM&lt;/strong&gt; - Number Of Methods, &lt;strong&gt;NOC&lt;/strong&gt; - Number Of Classess and &lt;strong&gt;NOP&lt;/strong&gt; - Number Of Packages, depending
on which language it can be Package (Java), Module (Python, JavaScript), Namespace (C++, PHP) etc.&lt;/p&gt;
&lt;p&gt;How to read them? Number on the right of metric is value of this metric. Number above the metric is more important - it's a ratio of a metric
divided by next metric. For e.g. using previous image:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LOC/NOM = 7082/461 = 15.362&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As you can see this value is shown on green - it means that's too high. Code for which this image was generated had too long, not specialized methods.
For the rest metrics calculations are analogical.&lt;/p&gt;
&lt;p&gt;Whole Overview Pyramid is divided into 3 parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One, already described tells about &lt;strong&gt;Size and Complexity&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Right one (&lt;strong&gt;FANOUT, CALLS, NOM&lt;/strong&gt;) tells about &lt;strong&gt;Coupling&lt;/strong&gt; between classes.&lt;/li&gt;
&lt;li&gt;Upper part (AHH, ANDC) tells about bad smells in &lt;strong&gt;Inheritance&lt;/strong&gt; tree.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Based on these number you can think how to refactor your code, to be more maintanable and clearer.&lt;/p&gt;
&lt;p&gt;It's possible to generate such a diagram using for e.g. &lt;strong&gt;PHP_Depend&lt;/strong&gt;, for Java you can use &lt;strong&gt;Cultivate, inFusion&lt;/strong&gt; plugin for Eclipse.
Below you will find example how to generate this diagram using PHP_Depend&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;php pdepend.php --summary-xml&lt;span class="o"&gt;=&lt;/span&gt;output/metrics.log --overview-pyramid&lt;span class="o"&gt;=&lt;/span&gt;output/pyramid.svg PATH_TO_CODE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command will generate you a Overview Pyramid in &lt;em&gt;output/pyramid.svg&lt;/em&gt; file for a code inside &lt;em&gt;PATH_TO_CODE&lt;/em&gt;. Additionally
it will generate metrics values for each of the files in that folder.&lt;/p&gt;
&lt;h2&gt;Heart of the problem - Disharmonies&lt;/h2&gt;
&lt;p&gt;As said using metrics it is possible to detect anomalies in code. Such an anomalies are divided into 3 groups:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identity Disharmonies&lt;/li&gt;
&lt;li&gt;Colaboration Disharmonies&lt;/li&gt;
&lt;li&gt;Classification Disharmonies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These ones should be remembered! You should watch out for them. I will shortly describe them by saying few words about their opposition - Harmonies.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Identity Harmony means that every entity is justified. All entities have their meaning and are specialized in what they're doing or they're representing.
In practice you can say that class should have compact interface, also data and operations should collaborate with each other (for e.g. no data that is not
used by any of the methods), methods should be cohesive.&lt;/li&gt;
&lt;li&gt;Collaboration Harmony describes how entities are interacting with each others - if they're not communicating with too many other entities, or if entities
are not doing too much work (so do not use too many services, but also do not do everything alone).&lt;/li&gt;
&lt;li&gt;Classification Harmony focuses on inheritance. Tells if entities are justified in inheritance tree.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All the artfacts of a system should be in harmony.&lt;/p&gt;
&lt;p&gt;So now the disharmonies. Of course they should be avoided, cause they make the code smelling bad - mostly they show that system is designed against
the OOP rules. An example of such disharmony is &lt;strong&gt;God Class&lt;/strong&gt;. Such class have a set of different methods, which are not cohesive (cohession means
that methods use the same class attribute) and are not compact. Such a class is not defined correctly cause does not represent real entity and 
takes too much responsibility on itself. These classes often have more than 1000 lines of code. Maintaining such a class is really hard
because of it's complexity. God Class should be divided into smaller entities which will be specialized in what they're meant for.
Other disharmonies are be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feature Envy - objects instead of using their own data, tend to use data of other classes (accessors also count!)&lt;/li&gt;
&lt;li&gt;Data Class - objects which are really structures. They have data but no encapsulation or interface to work on this data.&lt;/li&gt;
&lt;li&gt;Brain Method - mostly occures in God Class. It's a huge method that mixes different functionalities and tries to solve more than
one small problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These ones are only examples, because there are many more. To know about other ones I
suggest reading &lt;strong&gt;Object Oriented Metrics in Practics by Michele Lanza and Radu Marinescu&lt;/strong&gt;. Knowing them will make you write good Object-Oriented code.&lt;/p&gt;
&lt;p&gt;Uff... that's the end for now. This post started to be too long. I will later continue disharmonies topic in separate article to say about them a little bit
more - how to detect them, how to get rid of them.&lt;/p&gt;</summary><category term="OOP"></category><category term="Metrics"></category><category term="Code Quality"></category></entry><entry><title>First post using Pelican</title><link href="http://www.piotrdeszynski.com/first-post.html" rel="alternate"></link><updated>2012-10-17T22:29:57+02:00</updated><author><name>Piotr Deszyński</name></author><id>tag:www.piotrdeszynski.com,2012-10-17:first-post.html</id><summary type="html">&lt;h1&gt;Hello!&lt;/h1&gt;
&lt;p&gt;Welcome on another boring blog! Generally I don't think too many people will be reading this stuff,
but this is the first time that I'm trying to write something.&lt;/p&gt;
&lt;h2&gt;Behind the scenes&lt;/h2&gt;
&lt;p&gt;This blog is generated by Pelican - static blog generator written in python. Firstly I would like
to say thanks for nice work! It was really a pleasure to generate one using this stuff.&lt;/p&gt;</summary><category term="boring"></category><category term="something new"></category></entry><entry><title>Something boring about me</title><link href="http://www.piotrdeszynski.com/about.html" rel="alternate"></link><updated>2012-10-17T20:00:00+02:00</updated><author><name>Piotr Deszyński</name></author><id>tag:www.piotrdeszynski.com,2012-10-17:about.html</id><summary type="html">&lt;h2&gt;Piotr Deszyński&lt;/h2&gt;
&lt;p&gt;placeholder for image ;)&lt;/p&gt;
&lt;p&gt;Yup that's me. Or at least there will be me. I'm waiting for some picture that can be used here. But who am I?
Yet another boring programmer, who loves sitting down nearby his computer and dive into different stuff. Sadly (or rather this is my big luck)
I have a wife which doesn't allow me to sit and work too much. So basically I'm always having problem with time.&lt;/p&gt;
&lt;h2&gt;What am I doing?&lt;/h2&gt;
&lt;p&gt;Right now I'm working in company named &lt;strong&gt;Red Sky&lt;/strong&gt;. Don't know if you heard about it thought... 
maybe you heard about &lt;a href="http://www.filestube.com" title="Filestube"&gt;Filestube&lt;/a&gt;... Still nothing?
I'm working here mostly on webdevel. Using PHP, Javascript, Python, C++ and sometimes Java. When I have some free time (can say once per month) then
I like to dig into OpenGL(ES) and Android platform.
Besides these I'm interested in code quality (OOP metrics) and design patterns. So if you know any of these mail me (deszynski [at] red-sky.pl)! It'll be a pleasure to
exchange some info.&lt;/p&gt;
&lt;p&gt;Other thing that I have on my head is recrutation to &lt;strong&gt;Red Sky&lt;/strong&gt; company. So if you would like to send a CV to &lt;a href="mailto:work@red-sky.pl," title="Recrutation"&gt;work@red-sky.pl&lt;/a&gt;,
probably you will meet me there in the room, asking you some questions.&lt;/p&gt;
&lt;p&gt;I'm playing also as a boss in &lt;strong&gt;Red Sky SRL&lt;/strong&gt; - Moldovan branch of our company, where I spent 1+ year, also trying great Moldovan wine. 
Still I'm not sure if I'm good or bad one (hope seeing comments saying that I'm a good one).&lt;/p&gt;
&lt;p&gt;Last thing - from few days I'm called in our company &lt;strong&gt;"Culture Ninja"&lt;/strong&gt;, whatever it is. Hope I will be able to be a Ninja enough to maintain this role
and make something good.&lt;/p&gt;
&lt;h2&gt;What do I hate?&lt;/h2&gt;
&lt;p&gt;Ruby! Had to write that because of problems which came with this language. No other positions on this list.&lt;/p&gt;
&lt;p&gt;Beneath you will find my certifications:&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;ups, it's empty for now. After second thought: nope, it will stay empty here even after. I'm not sure if showing off with certs proves anything.&lt;/p&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Piotr Deszyński&lt;/li&gt;
&lt;li&gt;Working at &lt;strong&gt;Red Sky Sp. z o.o.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;PHP, Python, C++, Java, Zend Framework, jQuery, CSS, HTML5&lt;/li&gt;
&lt;li&gt;Code quality (OOP metrics)&lt;/li&gt;
&lt;li&gt;Interested in: all technologies and programming stuff&lt;/li&gt;
&lt;/ul&gt;</summary><category term="about"></category></entry></feed>