<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Yet another boring programmer's blog</title><link href="http://www.piotrdeszynski.com/" rel="alternate"></link><link href="http://www.piotrdeszynski.com/feeds/11.atom.xml" rel="self"></link><id>http://www.piotrdeszynski.com/</id><updated>2012-11-10T20:00:00+01:00</updated><entry><title>Vagrant, VirtualBox, Puppet and how to make it together</title><link href="http://www.piotrdeszynski.com/vagrant-virtualbox-puppet-and-how-to-make-it-together.html" rel="alternate"></link><updated>2012-11-10T20:00:00+01:00</updated><author><name>Piotr Deszy≈Ñski</name></author><id>tag:www.piotrdeszynski.com,2012-11-10:vagrant-virtualbox-puppet-and-how-to-make-it-together.html</id><summary type="html">&lt;p&gt;How many times in your career you heard from other programmers in your team: &lt;em&gt;"For me it works"&lt;/em&gt; while developing some functionality. It happen to me really often. Why does it happen? 99% of the cases it's the difference between environments on which app was run. By myself, I install huge amount of libs on my system not relevant to current project and I forget about them really often having a mess in my personal system. I think, lots of people does the same.&lt;/p&gt;
&lt;p&gt;Coming back to the previously stated problem, how to solve it? One of the possible approaches might be using &lt;strong&gt;Continous Integration&lt;/strong&gt; for that, by creating for e.g. unstable, unreviewed branch and setuping CI to make builds based on it. Even if this will work then still it's not optimal solution, because it forces you to push unstable code to repository. Additionally you have to schedule new build and wait for the results.&lt;/p&gt;
&lt;p&gt;Much better approach would be having during the development a way to ensure that everybody have the same environment adn as close as it's possible similar to production one. Answer for all and even more might be &lt;a href="http://vagrantup.com" title="Vagrant home page"&gt;&lt;strong&gt;Vagrant!&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vagrant&lt;/strong&gt; uses &lt;strong&gt;VirtualBox&lt;/strong&gt; to build for you a virtual machine ready for work. The main advantage of it is it's simplicity to run it. As manual says to start a VM it's enough&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;vagrant box add lucid32 http://files.vagrantup.com/lucid32.box
vagrant init lucid32
vagrant up
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will download you a box (it's something like base image of a system) and add it to system, initialize it in current directory and run VirtualBox. It's really simple!&lt;/p&gt;</summary><category term="Vagrant"></category><category term="VirtualBox"></category><category term="Puppet"></category><category term="Development"></category></entry></feed>